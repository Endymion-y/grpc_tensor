// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "calc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace calc {
class PointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point> {
} _Point_default_instance_;
class LineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Line> {
} _Line_default_instance_;
class CircleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Circle> {
} _Circle_default_instance_;
class AreaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Area> {
} _Area_default_instance_;
class CircumDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Circum> {
} _Circum_default_instance_;

namespace protobuf_calc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, c_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circle, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circle, radius_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Area, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Area, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circum, value_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Point)},
  { 6, -1, sizeof(Line)},
  { 13, -1, sizeof(Circle)},
  { 19, -1, sizeof(Area)},
  { 24, -1, sizeof(Circum)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Line_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Circle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Area_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Circum_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "calc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _Point_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Line_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Circle_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Area_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Circum_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Point_default_instance_.DefaultConstruct();
  _Line_default_instance_.DefaultConstruct();
  _Circle_default_instance_.DefaultConstruct();
  _Area_default_instance_.DefaultConstruct();
  _Circum_default_instance_.DefaultConstruct();
  _Circle_default_instance_.get_mutable()->center_ = const_cast< ::calc::Point*>(
      ::calc::Point::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\ncalc.proto\022\004calc\"\035\n\005Point\022\t\n\001x\030\001 \001(\001\022\t"
      "\n\001y\030\002 \001(\001\"\'\n\004Line\022\t\n\001A\030\001 \001(\001\022\t\n\001B\030\002 \001(\001\022"
      "\t\n\001C\030\003 \001(\001\"5\n\006Circle\022\033\n\006center\030\001 \001(\0132\013.c"
      "alc.Point\022\016\n\006radius\030\002 \001(\001\"\025\n\004Area\022\r\n\005val"
      "ue\030\001 \001(\001\"\027\n\006Circum\022\r\n\005value\030\001 \001(\0012.\n\004Cal"
      "c\022&\n\010CalcArea\022\014.calc.Circle\032\n.calc.Area\""
      "\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "calc.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_calc_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_calc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calc.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:calc.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:calc.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_calc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_calc_2eproto::file_level_metadata[0].descriptor;
}

const Point& Point::default_instance() {
  protobuf_calc_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:calc.Point)
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calc.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calc.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calc.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calc.Point)
  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:calc.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calc.Point)
  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:calc.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calc.Point)
  size_t total_size = 0;

  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calc.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calc.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calc.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calc.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calc.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calc.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_calc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_calc_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// double x = 1;
void Point::clear_x() {
  x_ = 0;
}
double Point::x() const {
  // @@protoc_insertion_point(field_get:calc.Point.x)
  return x_;
}
void Point::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:calc.Point.x)
}

// double y = 2;
void Point::clear_y() {
  y_ = 0;
}
double Point::y() const {
  // @@protoc_insertion_point(field_get:calc.Point.y)
  return y_;
}
void Point::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:calc.Point.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Line::kAFieldNumber;
const int Line::kBFieldNumber;
const int Line::kCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Line::Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_calc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calc.Line)
}
Line::Line(const Line& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_) + sizeof(c_));
  // @@protoc_insertion_point(copy_constructor:calc.Line)
}

void Line::SharedCtor() {
  ::memset(&a_, 0, reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_) + sizeof(c_));
  _cached_size_ = 0;
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:calc.Line)
  SharedDtor();
}

void Line::SharedDtor() {
}

void Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Line::descriptor() {
  protobuf_calc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_calc_2eproto::file_level_metadata[1].descriptor;
}

const Line& Line::default_instance() {
  protobuf_calc_2eproto::InitDefaults();
  return *internal_default_instance();
}

Line* Line::New(::google::protobuf::Arena* arena) const {
  Line* n = new Line;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:calc.Line)
  ::memset(&a_, 0, reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_) + sizeof(c_));
}

bool Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calc.Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double A = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double B = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calc.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calc.Line)
  return false;
#undef DO_
}

void Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calc.Line)
  // double A = 1;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->a(), output);
  }

  // double B = 2;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->b(), output);
  }

  // double C = 3;
  if (this->c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->c(), output);
  }

  // @@protoc_insertion_point(serialize_end:calc.Line)
}

::google::protobuf::uint8* Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calc.Line)
  // double A = 1;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->a(), target);
  }

  // double B = 2;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->b(), target);
  }

  // double C = 3;
  if (this->c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->c(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:calc.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calc.Line)
  size_t total_size = 0;

  // double A = 1;
  if (this->a() != 0) {
    total_size += 1 + 8;
  }

  // double B = 2;
  if (this->b() != 0) {
    total_size += 1 + 8;
  }

  // double C = 3;
  if (this->c() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calc.Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Line* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calc.Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calc.Line)
    MergeFrom(*source);
  }
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calc.Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.c() != 0) {
    set_c(from.c());
  }
}

void Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calc.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calc.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::Swap(Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Line::InternalSwap(Line* other) {
  std::swap(a_, other->a_);
  std::swap(b_, other->b_);
  std::swap(c_, other->c_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Line::GetMetadata() const {
  protobuf_calc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_calc_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Line

// double A = 1;
void Line::clear_a() {
  a_ = 0;
}
double Line::a() const {
  // @@protoc_insertion_point(field_get:calc.Line.A)
  return a_;
}
void Line::set_a(double value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:calc.Line.A)
}

// double B = 2;
void Line::clear_b() {
  b_ = 0;
}
double Line::b() const {
  // @@protoc_insertion_point(field_get:calc.Line.B)
  return b_;
}
void Line::set_b(double value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:calc.Line.B)
}

// double C = 3;
void Line::clear_c() {
  c_ = 0;
}
double Line::c() const {
  // @@protoc_insertion_point(field_get:calc.Line.C)
  return c_;
}
void Line::set_c(double value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:calc.Line.C)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Circle::kCenterFieldNumber;
const int Circle::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Circle::Circle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_calc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calc.Circle)
}
Circle::Circle(const Circle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::calc::Point(*from.center_);
  } else {
    center_ = NULL;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:calc.Circle)
}

void Circle::SharedCtor() {
  ::memset(&center_, 0, reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&center_) + sizeof(radius_));
  _cached_size_ = 0;
}

Circle::~Circle() {
  // @@protoc_insertion_point(destructor:calc.Circle)
  SharedDtor();
}

void Circle::SharedDtor() {
  if (this != internal_default_instance()) {
    delete center_;
  }
}

void Circle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Circle::descriptor() {
  protobuf_calc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_calc_2eproto::file_level_metadata[2].descriptor;
}

const Circle& Circle::default_instance() {
  protobuf_calc_2eproto::InitDefaults();
  return *internal_default_instance();
}

Circle* Circle::New(::google::protobuf::Arena* arena) const {
  Circle* n = new Circle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:calc.Circle)
  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  radius_ = 0;
}

bool Circle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calc.Circle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calc.Point center = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radius = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calc.Circle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calc.Circle)
  return false;
#undef DO_
}

void Circle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calc.Circle)
  // .calc.Point center = 1;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->center_, output);
  }

  // double radius = 2;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radius(), output);
  }

  // @@protoc_insertion_point(serialize_end:calc.Circle)
}

::google::protobuf::uint8* Circle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calc.Circle)
  // .calc.Point center = 1;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->center_, false, target);
  }

  // double radius = 2;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radius(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:calc.Circle)
  return target;
}

size_t Circle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calc.Circle)
  size_t total_size = 0;

  // .calc.Point center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->center_);
  }

  // double radius = 2;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Circle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calc.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  const Circle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Circle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calc.Circle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calc.Circle)
    MergeFrom(*source);
  }
}

void Circle::MergeFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calc.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    mutable_center()->::calc::Point::MergeFrom(from.center());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void Circle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calc.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Circle::CopyFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calc.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Circle::IsInitialized() const {
  return true;
}

void Circle::Swap(Circle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Circle::InternalSwap(Circle* other) {
  std::swap(center_, other->center_);
  std::swap(radius_, other->radius_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Circle::GetMetadata() const {
  protobuf_calc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_calc_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Circle

// .calc.Point center = 1;
bool Circle::has_center() const {
  return this != internal_default_instance() && center_ != NULL;
}
void Circle::clear_center() {
  if (GetArenaNoVirtual() == NULL && center_ != NULL) delete center_;
  center_ = NULL;
}
const ::calc::Point& Circle::center() const {
  // @@protoc_insertion_point(field_get:calc.Circle.center)
  return center_ != NULL ? *center_
                         : *::calc::Point::internal_default_instance();
}
::calc::Point* Circle::mutable_center() {
  
  if (center_ == NULL) {
    center_ = new ::calc::Point;
  }
  // @@protoc_insertion_point(field_mutable:calc.Circle.center)
  return center_;
}
::calc::Point* Circle::release_center() {
  // @@protoc_insertion_point(field_release:calc.Circle.center)
  
  ::calc::Point* temp = center_;
  center_ = NULL;
  return temp;
}
void Circle::set_allocated_center(::calc::Point* center) {
  delete center_;
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:calc.Circle.center)
}

// double radius = 2;
void Circle::clear_radius() {
  radius_ = 0;
}
double Circle::radius() const {
  // @@protoc_insertion_point(field_get:calc.Circle.radius)
  return radius_;
}
void Circle::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:calc.Circle.radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Area::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Area::Area()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_calc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calc.Area)
}
Area::Area(const Area& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:calc.Area)
}

void Area::SharedCtor() {
  value_ = 0;
  _cached_size_ = 0;
}

Area::~Area() {
  // @@protoc_insertion_point(destructor:calc.Area)
  SharedDtor();
}

void Area::SharedDtor() {
}

void Area::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Area::descriptor() {
  protobuf_calc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_calc_2eproto::file_level_metadata[3].descriptor;
}

const Area& Area::default_instance() {
  protobuf_calc_2eproto::InitDefaults();
  return *internal_default_instance();
}

Area* Area::New(::google::protobuf::Arena* arena) const {
  Area* n = new Area;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Area::Clear() {
// @@protoc_insertion_point(message_clear_start:calc.Area)
  value_ = 0;
}

bool Area::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calc.Area)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calc.Area)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calc.Area)
  return false;
#undef DO_
}

void Area::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calc.Area)
  // double value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:calc.Area)
}

::google::protobuf::uint8* Area::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calc.Area)
  // double value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:calc.Area)
  return target;
}

size_t Area::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calc.Area)
  size_t total_size = 0;

  // double value = 1;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Area::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calc.Area)
  GOOGLE_DCHECK_NE(&from, this);
  const Area* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Area>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calc.Area)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calc.Area)
    MergeFrom(*source);
  }
}

void Area::MergeFrom(const Area& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calc.Area)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Area::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calc.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Area::CopyFrom(const Area& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calc.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Area::IsInitialized() const {
  return true;
}

void Area::Swap(Area* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Area::InternalSwap(Area* other) {
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Area::GetMetadata() const {
  protobuf_calc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_calc_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Area

// double value = 1;
void Area::clear_value() {
  value_ = 0;
}
double Area::value() const {
  // @@protoc_insertion_point(field_get:calc.Area.value)
  return value_;
}
void Area::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:calc.Area.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Circum::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Circum::Circum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_calc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calc.Circum)
}
Circum::Circum(const Circum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:calc.Circum)
}

void Circum::SharedCtor() {
  value_ = 0;
  _cached_size_ = 0;
}

Circum::~Circum() {
  // @@protoc_insertion_point(destructor:calc.Circum)
  SharedDtor();
}

void Circum::SharedDtor() {
}

void Circum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Circum::descriptor() {
  protobuf_calc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_calc_2eproto::file_level_metadata[4].descriptor;
}

const Circum& Circum::default_instance() {
  protobuf_calc_2eproto::InitDefaults();
  return *internal_default_instance();
}

Circum* Circum::New(::google::protobuf::Arena* arena) const {
  Circum* n = new Circum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Circum::Clear() {
// @@protoc_insertion_point(message_clear_start:calc.Circum)
  value_ = 0;
}

bool Circum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calc.Circum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calc.Circum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calc.Circum)
  return false;
#undef DO_
}

void Circum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calc.Circum)
  // double value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:calc.Circum)
}

::google::protobuf::uint8* Circum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calc.Circum)
  // double value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:calc.Circum)
  return target;
}

size_t Circum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calc.Circum)
  size_t total_size = 0;

  // double value = 1;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Circum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calc.Circum)
  GOOGLE_DCHECK_NE(&from, this);
  const Circum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Circum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calc.Circum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calc.Circum)
    MergeFrom(*source);
  }
}

void Circum::MergeFrom(const Circum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calc.Circum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Circum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calc.Circum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Circum::CopyFrom(const Circum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calc.Circum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Circum::IsInitialized() const {
  return true;
}

void Circum::Swap(Circum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Circum::InternalSwap(Circum* other) {
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Circum::GetMetadata() const {
  protobuf_calc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_calc_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Circum

// double value = 1;
void Circum::clear_value() {
  value_ = 0;
}
double Circum::value() const {
  // @@protoc_insertion_point(field_get:calc.Circum.value)
  return value_;
}
void Circum::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:calc.Circum.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace calc

// @@protoc_insertion_point(global_scope)
